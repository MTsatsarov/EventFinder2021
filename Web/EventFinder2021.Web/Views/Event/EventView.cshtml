@using EventFinder2021.Web.ViewModels.EventViewModels
@using Microsoft.AspNetCore.Identity
@using EventFinder2021.Data.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf


@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@model EventViewModel
@{
    var currentUserId = this.UserManager.GetUserId(this.User);
}
@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
<body class="table-responsive">
    <div class="justify-content-xl-center">
        <h2 class="text-center">@Model.Name</h2>
        <hr />
        <a class="event-image image-lightbox " data-imagelightbox="image" title="The games of our grandparents in the museum">
            <img src="@Model.ImageUrl" title="@Model.Name" class="img-fluid mx-auto">
        </a>
        <div>
            <p>Category: @Model.Category</p>
            <p>City: @Model.City</p>
            <p>Date: @Model.Date</p>
        </div>
        <div class="custom-control-inline">
            <ul class="d-inline">
                <li class="star-fill" id="1" onclick="Vote(this.id)"><i class="fas fa-star"></i></li>
                <li class="star-fill" id="2" onclick="Vote(this.id)"><i class="fas fa-star"></i></li>
                <li class="star-fill" id="3" onclick="Vote(this.id)"><i class="fas fa-star"></i></li>
                <li class="star-fill" id="4" onclick="Vote(this.id)"><i class="fas fa-star"></i></li>
                <li class="star-fill" id="5" onclick="Vote(this.id)"><i class="fas fa-star"></i></li>
                <li><span id="averageVoteGrade">@Model.VotesAverageGrade<span> / 5</span></span></li>
            </ul>
        </div>
        <div id="contentpics">
            <h3></h3>
            <div class="post-gallery">
                <div class="row">
                </div>
            </div>
        </div>
        @* TODO *@
        @if (this.SignInManager.IsSignedIn(this.User) && currentUserId != Model.CreatorId)
        {
            <div>
                <div id="btnSuccess" style="display:inline">
                    <button onclick="Going()" class="btn-success">Going</button>
                </div>
                <div id="btn-danger" style="display:inline">
                    <button id="btn" type="submit" class="btn-danger" onclick=NotGoing()>Not Going</button>
                </div>
            </div>
        }
    </div>

    <hr />
    <span>
        @Model.Description
    </span>
    <hr />
    <div>
        <span>
            <a class="btn btn-primary" asp-controller="Comentary" asp-action="AllComentaries" asp-route-id="@Model.Id">See comments</a>
        </span>
        <span class="">
            <a class="btn btn-primary" asp-controller="Comentary" asp-action="WriteComentary" asp-route-id="@Model.Id">Write commentary</a>
        </span>
    </div>
    <script>
        function Going() {


      var xhttp = new XMLHttpRequest();
            xhttp.open('POST', "/Event/GoingToEvent", true);
            xhttp.setRequestHeader("Content-Type", "application/json");
            xhttp.setRequestHeader("RequestVerificationToken", "@GetAntiXsrfRequestToken()");
            xhttp.onreadystatechange = function() {
                     if (this.readyState == 4 && this.status == 200) {
                         // Response
                         var responseText = JSON.parse(this.responseText);
                         var count = responseText.count
                         document.getElementById("btnSuccess").outerHTML = count;

                     }
    };
            var data = { userId: '@currentUserId', eventId: '@Model.Id' };
            xhttp.send(JSON.stringify(data));
        }
    </script>
    <script>
        function NotGoing() {


      var xhttp = new XMLHttpRequest();
            xhttp.open('POST', "/Event/NotGoingToEvent", true);
            xhttp.setRequestHeader("Content-Type", "application/json");
            xhttp.setRequestHeader("RequestVerificationToken", "@GetAntiXsrfRequestToken()");
            xhttp.onreadystatechange = function() {
                     if (this.readyState == 4 && this.status == 200) {
                         // Response
                         var responseText = JSON.parse(this.responseText);
                         var count = responseText.count
                         document.getElementById("btn-danger").innerText = count.AverageVoteValue;

                     }
    };
            var data = { userId: '@currentUserId', eventId: '@Model.Id' };
            xhttp.send(JSON.stringify(data));
        }
    </script>

    <script>
        function Vote(clicked_id) {
      var xhttp = new XMLHttpRequest();
            xhttp.open('POST', "/api/Votes", true);
            xhttp.setRequestHeader("Content-Type", "application/json");
            @*xhttp.setRequestHeader("RequestVerificationToken", "@GetAntiXsrfRequestToken()");*@
            xhttp.onreadystatechange = function ()
            {
                     if (this.readyState == 4 && this.status == 200) {
                         // Response
                         var responseText = JSON.parse(this.responseText);
                         var grade = responseText.Value;
                         document.getElementById('averageVoteGrade').Value = `${grade}/5`;

                     }
            };

            var data = { eventId: @Model.Id, grade: clicked_id };
            xhttp.send(JSON.stringify(data));
        }
    </script>

</body>


